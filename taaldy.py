# -*- coding: utf-8 -*-
"""TAAldy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rxKCEyj4dm-vSK2ofpk8QFw14nqcDtWI
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.preprocessing import MinMaxScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.model_selection import train_test_split

x = pd.read_csv('shopping_trends.csv', encoding = 'unicode_escape')
x.head(10)

print("Data cleaning")
print()
print(x.info())
print(x.shape)
print(x.isnull().sum())
x = x.dropna()
print(x.info())
print(x.shape)

try:
  x['Item Purchased'] = x['Item Purchased'].astype(str)
except (TypeError, KeyError):
  print("Error: 'Item Purchased' column might not exist or have incompatible data types.")

try:
  x['Item Purchased'] = x['Item Purchased'].astype(int)
except ValueError:
  print("Error: 'Item Purchased' column contains non-numeric values that cannot be converted to integers.")

categorical_features = [ 'Item Purchased','Category', 'Location', 'Color', 'Season', 'Subscription Status', 'Payment Method',
                        'Shipping Type',	'Discount Applied',	'Promo Code Used', 'Preferred Payment Method', 'Frequency of Purchases']
le = LabelEncoder()
for col in categorical_features:
    x[col] = le.fit_transform(x[col])

ohe = OneHotEncoder(sparse_output=False)
encoded_cols = ohe.fit_transform(x[categorical_features])
data = pd.concat([x, pd.DataFrame(encoded_cols, columns=ohe.get_feature_names_out(categorical_features))], axis=1)
data.drop(categorical_features, axis=1, inplace=True)
print(data.head(10)) # Call the print function with the DataFrame head as argument.

print("Data Preprocessing")
print()

try:
  x['Customer ID'] = x['Customer ID'].astype(str)
  x['Item Purchased'] = x['Item Purchased'].astype(str)
except (TypeError, KeyError):
  print("Error: 'Customer ID' or 'Item Purchased' columns might not exist or have incompatible data types.")

x['Amount'] = x['Purchase Amount (USD)']
rfm_x_m = x.groupby('Customer ID')[['Amount', 'Item Purchased']].sum().reset_index()

rfm_x_m.columns = ['Customer ID', 'Amount', 'Item Purchased']

print(rfm_x_m)

import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import LabelEncoder

x = pd.read_csv('shopping_trends.csv')
le = LabelEncoder()

# Apply LabelEncoder to 'Item Purchased' and 'Location'
x['Item Purchased'] = le.fit_transform(x['Item Purchased'])
x['Location'] = le.fit_transform(x['Location'])

features = ['Location', 'Item Purchased']
X = x[features]
kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(X)
x['Cluster'] = kmeans.labels_
print(x.head(10)[['Customer ID', 'Location', 'Item Purchased', 'Cluster']])

# Select relevant columns for the Excel sheet
data_to_excel = x[['Customer ID', 'Location', 'Item Purchased', 'Cluster']]

# Save the data to an Excel sheet (adjust file name as needed)
data_to_excel.to_excel('clustered_Location3.xlsx', index=False)

print("Clustered data saved to 'clustered_Location3.xlsx'!")

import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import LabelEncoder

x = pd.read_csv('shopping_trends.csv')
le = LabelEncoder()

# Apply LabelEncoder to 'Item Purchased' and 'Location'
x['Item Purchased'] = le.fit_transform(x['Item Purchased'])
features = ['Purchase Amount (USD)', 'Item Purchased']
X = x[features]
kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(X)
x['Cluster'] = kmeans.labels_
print(x.head(10)[['Customer ID', 'Purchase Amount (USD)', 'Item Purchased', 'Cluster']])

# Select relevant columns for the Excel sheet
data_to_excel = x[['Customer ID', 'Purchase Amount (USD)', 'Item Purchased', 'Cluster']]

# Save the data to an Excel sheet (adjust file name as needed)
data_to_excel.to_excel('clustered_Customer.xlsx', index=False)

print("Clustered data saved to 'clustered_Location3.xlsx'!")

import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import LabelEncoder

x = pd.read_csv('shopping_trends.csv')
le = LabelEncoder()

# Apply LabelEncoder to 'Item Purchased' and 'Season'
x['Item Purchased'] = le.fit_transform(x['Item Purchased'])
x['Season'] = le.fit_transform(x['Season']) # Encode the 'Season' column
# Apply LabelEncoder to 'Category' column as well
x['Category'] = le.fit_transform(x['Category'])  # Encode the 'Category' column

features = ['Season', 'Item Purchased', 'Category']
X = x[features]
kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(X)
x['Cluster'] = kmeans.labels_
print(x.head(10)[['Customer ID', 'Season', 'Item Purchased', 'Category','Cluster']])

# Select relevant columns for the Excel sheet
data_to_excel = x[['Customer ID', 'Season', 'Item Purchased','Category', 'Cluster']]

# Save the data to an Excel sheet (adjust file name as needed)
data_to_excel.to_excel('clustered_season2.xlsx', index=False)

print("Clustered data saved to 'clustered_season.xlsx'!")

import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import LabelEncoder

x = pd.read_csv('shopping_trends.csv')
le = LabelEncoder()

# Apply LabelEncoder to 'Item Purchased' and 'Season'
x['Location'] = le.fit_transform(x['Location'])
x['Season'] = le.fit_transform(x['Season']) # Encode the 'Season' column
# Apply LabelEncoder to 'Category' column as well
x['Shipping Type'] = le.fit_transform(x['Shipping Type'])  # Encode the 'Category' column

features = ['Season', 'Shipping Type', 'Location']
X = x[features]
kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(X)
x['Cluster'] = kmeans.labels_
print(x.head(10)[['Customer ID', 'Season', 'Shipping Type', 'Location','Cluster']])

# Select relevant columns for the Excel sheet
data_to_excel = x[['Customer ID', 'Shipping Type', 'Season', 'Location', 'Cluster']]

# Save the data to an Excel sheet (adjust file name as needed)
data_to_excel.to_excel('clustered_shipping2.xlsx', index=False)

print("Clustered data saved to 'clustered_shipping.xlsx'!")

import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import LabelEncoder

x = pd.read_csv('shopping_trends.csv')
le = LabelEncoder()

# Apply LabelEncoder to 'Item Purchased' and 'Season'
x['Item Purchased'] = le.fit_transform(x['Item Purchased'])
x['Season'] = le.fit_transform(x['Season']) # Encode the 'Season' column
# Apply LabelEncoder to 'Category' column as well
x['Category'] = le.fit_transform(x['Category'])  # Encode the 'Category' column

features = ['Season', 'Item Purchased', 'Category']
X = x[features]
kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(X)
x['Cluster'] = kmeans.labels_
print(x.head(10)[['Customer ID', 'Season', 'Item Purchased', 'Category','Cluster']])

# Select relevant columns for the Excel sheet
data_to_excel = x[['Customer ID', 'Season', 'Item Purchased', 'Category', 'Cluster']]

# Save the data to an Excel sheet (adjust file name as needed)
data_to_excel.to_excel('clustered_Category2.xlsx', index=False)

print("Clustered data saved to 'clustered_Category2.xlsx'!")

import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import LabelEncoder

x = pd.read_csv('shopping_trends.csv')
le = LabelEncoder()

# Apply LabelEncoder to 'Item Purchased' and 'Season'
x['Item Purchased'] = le.fit_transform(x['Item Purchased'])
x['Gender'] = le.fit_transform(x['Gender']) # Encode the 'Season' column
# Apply LabelEncoder to 'Category' column as well
x['Color'] = le.fit_transform(x['Color'])  # Encode the 'Category' column

features = ['Gender', 'Item Purchased', 'Color']
X = x[features]
kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(X)
x['Cluster'] = kmeans.labels_
print(x.head(10)[['Customer ID', 'Gender', 'Item Purchased', 'Color','Cluster']])

# Select relevant columns for the Excel sheet
data_to_excel = x[['Customer ID', 'Gender', 'Item Purchased', 'Color', 'Cluster']]

# Save the data to an Excel sheet (adjust file name as needed)
data_to_excel.to_excel('clustered_Gender2.xlsx', index=False)

print("Clustered data saved to 'clustered_Gender2.xlsx'!")